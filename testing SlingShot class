class Weapon
{
    constructor(name, damage, range)
    {
        this.name = name;
        this.damage = damage;
        this.range = range;
    }

    attack() 
    {
        console.log(`${this.name} attacks, with a range of ${this.range}, causing ${this.damage} damage`);
    }

    needsAmmunition() 
    {
        return false;
    }

    prepareForAttack() 
    {
        console.log(`${this.name} is ready to attack`);
    }
}
class SlingShot extends Weapon 
{
    constructor(name, damage, range) 
    {
        super(name, damage, range);
        this.stones = 5; 
    }

    attack() 
    {
        if (this.stones > 0) 
        {
            this.stones--;
            console.log(`${this.name} slings a stone, causing ${this.damage} damage. number of stones left is ${this.stones}.`);
        } 
        else 
        {
            console.log(`${this.name} is out of stones`);
        }
    }

    needsAmmunition() 
    {
        return true;
    }

    prepareForAttack() 
    {
        if (this.stones === 0) 
        {
            console.log(`${this.name} needs more stones`);
        } 
        else 
        {
            console.log(`${this.name} is ready to sling`);
        }
    }
    reload (stones)
    {
        this.stones+= stones;
        console.log(`${this.name} reloaded with ${stones} stones, total stones now is: ${this.stones}`);
    }
}

const testSlingShot = () => 
{
    let slingShot = new SlingShot('SlingShot', 10, 20);
    for (let i = 0; i < 6; i++) 
    {
        slingShot.attack(); 
    }
    console.log(`Needs ammunition: ${slingShot.needsAmmunition()}`);
    slingShot.prepareForAttack();
    
    if(slingShot.stones === 0)
        {
            slingShot.reload(5);
        }
    console.log('attack again');
}
testSlingShot();